# GRAMMAR
program ::= START [decl-list] stmt-list EXIT
decl-list ::= decl {decl}
decl ::= type ident-list ';'
ident-list ::= identifier {',' identifier}
type ::= INT | FLOAT | STRING

stmt-list ::= stmt {stmt}
stmt ::= assing-stmt ';' | if-stmt | while-stmt | read-stmt ';' | write-stmt ';'
assign-stmt ::= identifier '=' simple_expr
if-stmt ::= IF condition THEN stmt-list END
            | IF condition THEN stmt-list else stmt-list END
condition ::= expression

while-stmt ::= DO stmt-list stmt-sufix
stmt-sufix ::= WHILE condition END

read-stmt ::= SCAN "(" identifier ")"
write-stmt ::= PRINT "(" writable ")"
writable ::= simple-expr | literal
expression ::= simple-expr | simple-expr relop simple-expr
simple-expr ::= term simple-expr-prime
simple-expr-prime ::= addop term simple-expr-prime | λ
term ::= factor-a term-prime
term-prime ::= mulop factor-a term-prime | λ
fator-a ::= factor | "!" factor | "-" factor
factor ::= identifier | constant | "(" expression ")"

# TOKENS
relop ::= "==" | ">" | ">=" | "<" | "<=" | "!="
addop ::= "+" | "-" | "||"
mulop ::= "*" | "/" | "%" | "&&"
constant ::= integer_const | float_const | literal
integer_const ::= (digit)+
float_const ::= (digit)+ '.' (digit)+
literal ::= " { " (caractere)* " } "
identifier ::= (letter | _ ) (letter | digit )*
letter ::= [A-za-z]
digit ::= [0-9]
caractere ::= um dos caracteres ASCII, exceto quebra de linha
